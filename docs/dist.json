{
  "openapi": "3.0.1",
  "info": {
    "title": "Ejoin Gateway HTTP API",
    "description": "Welcome to Ejoin Gateway HTTP API documentation. Here you will find details to learn about, try, and implement Ejoin Gateway HTTP API.\nThe Ejoin Gateway HTTP APIv2.4.0 is available in SMSEagle software version 5.0 and higher.",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "SMS Sending"
    },
    {
      "name": "ESIM"
    }
  ],
  "paths": {
    "/goip_post_sms.html": {
      "post": {
        "summary": "SMS Sending",
        "deprecated": false,
        "description": "Tips:\n1. While not choose a port, device will pick up a random port to send SMS to every recipient.\n2. While chose more than one ports, and just one SMS recipient , then device will use all chose port to\nsend SMS to this recipient.\n3. If more ports, and more recipient designed, then every port will send SMS to every recipient\nseparately.",
        "tags": [
          "SMS Sending"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API version",
            "required": false,
            "example": "1.01",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Device username",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Device password",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Message type"
                  },
                  "sr_url": {
                    "type": "string",
                    "description": "Status report forward url"
                  },
                  "sr_cnt": {
                    "type": "string",
                    "description": "Max num of SMS\nresult can keep in\ncache."
                  },
                  "sr_prd": {
                    "type": "integer",
                    "description": "The max time SMS\nresult can keep in\ncache"
                  },
                  "sms_url": {
                    "type": "string",
                    "description": "SMS forward URL"
                  },
                  "sms_cnt": {
                    "type": "string",
                    "description": "Max num of SMS can\nkeep in cache"
                  },
                  "sms_prd": {
                    "type": "integer",
                    "description": "Max time SMS can"
                  },
                  "task_num": {
                    "type": "string",
                    "description": "Total task"
                  },
                  "tasks": {
                    "type": "object",
                    "properties": {
                      "tid": {
                        "type": "integer",
                        "description": "Task ID"
                      },
                      "from": {
                        "type": "string",
                        "description": "Use‘,’‘-’to assign more than one port(from\nchannel 1)"
                      },
                      "to": {
                        "type": "string",
                        "description": "one or more(use ‘,’to distinguish) recipients"
                      },
                      "to_all": {
                        "type": "string",
                        "description": "1 represents all ports",
                        "default": "1"
                      },
                      "sms": {
                        "type": "string",
                        "description": "SMS content"
                      },
                      "chs": {
                        "type": "string",
                        "description": "Character coding set (utf8|base64)"
                      },
                      "codeing": {
                        "type": "integer",
                        "description": "pecific the SMS codec",
                        "default": 0,
                        "enum": [
                          0,
                          1,
                          2
                        ]
                      },
                      "smstype": {
                        "type": "integer",
                        "default": 0,
                        "enum": [
                          0,
                          1,
                          2
                        ]
                      },
                      "smstitle": {
                        "type": "string",
                        "description": "MMS subject：MMS subject format is UTF-8，this parameter could be empty;"
                      },
                      "to_title_arr ay": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "[\"number\", \"title\"]"
                        }
                      }
                    },
                    "required": [
                      "tid",
                      "from",
                      "to",
                      "to_all",
                      "sms",
                      "chs",
                      "codeing",
                      "smstype",
                      "smstitle"
                    ]
                  }
                },
                "required": [
                  "type",
                  "task_num",
                  "tasks"
                ]
              },
              "example": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"\")\npayload = json.dumps({\n   \"type\": \"string\",\n   \"sr_url\": \"string\",\n   \"sr_cnt\": \"string\",\n   \"sr_prd\": 0,\n   \"sms_url\": \"string\",\n   \"sms_cnt\": \"string\",\n   \"sms_prd\": 0,\n   \"task_num\": \"string\",\n   \"tasks\": {\n      \"tid\": 0,\n      \"from\": \"string\",\n      \"to\": \"string\",\n      \"to_all\": \"1\",\n      \"sms\": \"string\",\n      \"chs\": \"string\",\n      \"codeing\": 0,\n      \"smstype\": 0,\n      \"smstitle\": \"string\",\n      \"to_title_arr ay\": [\n         \"string\"\n      ]\n   }\n})\nheaders = {\n   'Content-Type': 'application/json'\n}\nconn.request(\"POST\", \"/goip_post_sms.html?version=1.01&username=null&password=null\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))"
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "send-sms"
                    },
                    "task_num": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "tid": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "tid"
                        ]
                      }
                    }
                  },
                  "required": [
                    "type",
                    "task_num"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": "{“type”:“send-sms”,“task_num”:n, “tasks”:[{“tid”:tid_1, …},…，{“tid”:tid_n, …}]}"
                  }
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "object",
                      "properties": {
                        "recipients": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "recipients"
                      ]
                    }
                  },
                  "required": [
                    "message"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "异常示例",
                    "value": {
                      "message": {
                        "recipients": "One of parameters: to, contacts, groups is required."
                      }
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Invalid API key."
                    }
                  },
                  "required": [
                    "message"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "异常示例",
                    "value": {
                      "message": "Invalid API key."
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/goip_get_esims.html": {
      "get": {
        "summary": "Query ESIM",
        "deprecated": false,
        "description": "",
        "tags": [
          "ESIM"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API version  \n1.0: Compatible with\nprevious API\n1.1: Support for the description of this document",
            "required": false,
            "example": "1.0",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Device Username",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Device password",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ports",
            "in": "query",
            "description": "The specified port number (valued\nfrom 1). The values are as follows: (4) all: all ports;\n(5) 2: Specify a single port;\n(6) 1-2, 4: Port numbers separated by\nshort numbers, specifying multiple ports, where \"-\" indicates a continuous port number;",
            "required": false,
            "example": "all",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              },
              "example": "#include <string>\r\n#include <vector>\r\n#include <curl/curl.h>\r\n\r\nint main(void) {\r\n  CURL *curl;\r\n  CURLcode res;\r\n  using namespace std;\r\n\r\n  curl = curl_easy_init();\r\n  if(curl) {\r\n    char const *path = \"https://smseagleip/index.php/api/v2/messages/sms\";\r\n    curl_easy_setopt(curl, CURLOPT_URL, path);\r\n\r\n    string jsonPayload = R\"({\r\n        \"to\": [\"+4812345678\"],\r\n        \"contacts\": [12,15],\r\n        \"groups\": [57,35],\r\n        \"text\": \"my message\",\r\n        \"date\": \"2022-12-27T12:20:31+05:01\",\r\n        \"priority\": 5,\r\n        \"encoding\": \"unicode\",\r\n        \"flash\": true,\r\n        \"oid\": \"123abc456def789ghi123abc456def789ghi\",\r\n        \"validity\": \"30m\",\r\n        \"send_after\": \"12:05\",\r\n        \"send_before\": \"17:15\",\r\n        \"test\": true,\r\n        \"modem_no\": 2\r\n    })\";\r\n\r\n    struct curl_slist* headers = NULL;\r\n    headers = curl_slist_append(headers, \"Content-Type: application/json\");\r\n    headers = curl_slist_append(headers, \"access-token: 0005gOjCOlMH8F2BP8\");\r\n    curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\r\n\r\n    curl_easy_setopt(curl, CURLOPT_POSTFIELDS, jsonPayload.c_str());\r\n\r\n    res = curl_easy_perform(curl);\r\n\r\n    if(res != CURLE_OK)\r\n      fprintf(stderr, \"curl_easy_perform() failed: %s\\n\",\r\n              curl_easy_strerror(res));\r\n\r\n    curl_easy_cleanup(curl);\r\n  }\r\n  return 0;\r\n}\r\n"
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "reason": {
                      "type": "string"
                    },
                    "count": {
                      "type": "integer"
                    },
                    "ports": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "port": {
                            "type": "integer"
                          },
                          "eid": {
                            "type": "string"
                          },
                          "esim_state": {
                            "type": "string"
                          },
                          "profiles": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "slot": {
                                  "type": "integer"
                                },
                                "enabled": {
                                  "type": "integer"
                                },
                                "iccid": {
                                  "type": "string"
                                },
                                "ac": {
                                  "type": "string"
                                },
                                "cc": {
                                  "type": "string"
                                },
                                "provider": {
                                  "type": "string"
                                },
                                "exust": {
                                  "type": "integer"
                                },
                                "op": {
                                  "type": "integer"
                                },
                                "status": {
                                  "type": "integer",
                                  "description": "The current esim profile operation status, with\nthe following values The values are as follows: 0 - No operation\n1 - Operation request submitted\n2 - Profile operation is in progress on the\ncurrent port\n3 - Operation error, the specific reason is described in the reason field",
                                  "enum": [
                                    0,
                                    1,
                                    2,
                                    3
                                  ]
                                },
                                "reason": {
                                  "type": "string",
                                  "description": "Causes of operational errors"
                                }
                              },
                              "required": [
                                "slot",
                                "enabled",
                                "iccid",
                                "ac",
                                "cc",
                                "provider",
                                "exust",
                                "op",
                                "status",
                                "reason"
                              ]
                            }
                          }
                        },
                        "required": [
                          "port",
                          "eid",
                          "esim_state",
                          "profiles"
                        ]
                      }
                    }
                  },
                  "required": [
                    "code",
                    "reason",
                    "count",
                    "ports"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": "{“code”:200,“reason”：“OK”,“count”:n,“ports”:[{“port”:xxx,…}，…]}"
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    }
  },
  "components": {
    "schemas": {
      "tasks": {
        "type": "object",
        "properties": {
          "tid": {
            "type": "integer",
            "description": "Task ID"
          },
          "from": {
            "type": "string",
            "description": "Use‘,’‘-’to assign more than one port(from\nchannel 1)"
          },
          "to": {
            "type": "string"
          },
          "to_all": {
            "type": "string"
          },
          "sms": {
            "type": "string"
          },
          "chs": {
            "type": "string"
          }
        },
        "required": [
          "from",
          "to",
          "to_all",
          "sms",
          "chs"
        ]
      },
      "Pet": {
        "required": [
          "name",
          "photoUrls",
          "id",
          "category",
          "tags",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "description": "宠物ID编号"
          },
          "category": {
            "$ref": "#/components/schemas/Category",
            "description": "分组"
          },
          "name": {
            "type": "string",
            "description": "名称",
            "examples": [
              "doggie"
            ]
          },
          "photoUrls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "照片URL"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "description": "标签"
          },
          "status": {
            "type": "string",
            "description": "宠物销售状态",
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "description": "分组ID编号"
          },
          "name": {
            "type": "string",
            "description": "分组名称"
          }
        },
        "xml": {
          "name": "Category"
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "description": "标签ID编号"
          },
          "name": {
            "type": "string",
            "description": "标签名称"
          }
        },
        "xml": {
          "name": "Tag"
        }
      }
    },
    "securitySchemes": {}
  },
  "servers": [],
  "security": {}
}